// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  username     String
  profileImage String?  @map("profile_image")
  createdAt    DateTime @default(now()) @map("created_at")
  role         Role     @default(USER)

  userRiskAssessments UserRiskAssessment[]
  wishlists           Wishlist[]

  @@map("user")
}

model RiskAssessmentResult {
  id       Int @id @default(autoincrement())
  minScore Int @map("min_score")
  maxScore Int @map("max_score")

  userRiskLevel     UserRiskAssessment[]
  riskLevelMapping  RiskLevelMapping[]
  recommendPort     RecommendPort[]
  recommendCriteria RecommendCriteria[]

  @@map("risk_assessment_result")
}

model RecommendCriteria {
  id              Int    @id @default(autoincrement())
  userRiskLevelId Int    @map("user_risk_level_id")
  fundAssetType   String @map("fund_asset_type")
  percentInvest   Float  @map("percent_invest")

  riskAssessmentResult RiskAssessmentResult @relation(fields: [userRiskLevelId], references: [id], onDelete: Cascade)

  @@map("recommend_criteria")
}

model UserRiskAssessment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  userId               Int                  @map("user_id")
  users                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRiskLevelId      Int                  @map("user_risk_level_id")
  riskAssessmentResult RiskAssessmentResult @relation(fields: [userRiskLevelId], references: [id], onDelete: Cascade)

  @@map("user_risk_assessment")
}

// ผู้ลงทุนระดับความเสี่ยง 6 สามารถลงในกองไหนได้บ้าง
model RiskLevelMapping {
  id                   Int                  @id @default(autoincrement())
  userRiskLevelId      Int                  @map("user_risk_level_id")
  riskAssessmentResult RiskAssessmentResult @relation(fields: [userRiskLevelId], references: [id], onDelete: Cascade)
  fundRiskLevelName    String               @map("fund_risk_level_name") // array ["ตราสารทุน", "ตราสารหนี้"]

  @@map("risk_level_mapping")
}

model RecommendPort {
  id             Int    @id @default(autoincrement())
  investmentType String @map("investment_type")
  weight         Float

  userRiskLevelId      Int                  @map("user_risk_level_id")
  riskAssessmentResult RiskAssessmentResult @relation(fields: [userRiskLevelId], references: [id], onDelete: Cascade)

  @@map("recommend_port")
}

model RiskAssessmentQuestion {
  id       Int    @id @default(autoincrement())
  question String
  options  String
}

model Funds {
  id                Int     @id @default(autoincrement())
  fundCompareGroup  String  @map("fund_compare_group")
  investCountryFlag String  @map("invest_country_flag")
  fundPolicy        String? @map("fund_policy")
  urlFactsheet      String  @map("url_factsheet")
  projNameTh        String  @map("proj_name_th")
  projAbbrName      String  @map("proj_abbr_name")

  companyId       Int           @map("company_id")
  companies       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  fundRiskLevelId Int           @map("fund_risk_level_id")
  FundRiskLevel   FundRiskLevel @relation(fields: [fundRiskLevelId], references: [id], onDelete: Cascade)

  ClassAbbr ClassAbbr[]

  @@map("funds")
}

model Company {
  id          Int    @id @default(autoincrement())
  companyName String @map("company_name")

  Funds Funds[]

  @@map("company")
}

model FeeDetial {
  id          Int     @id @default(autoincrement())
  feeType     String  @map("fee_type")
  rate        Float
  rateUnit    String? @map("rate_unit")
  actualValue Float?  @map("actual_value")

  classAbbrId Int       @map("class_abbr_id")
  classAbbrs  ClassAbbr @relation(fields: [classAbbrId], references: [id], onDelete: Cascade)

  @@map("fee_detial")
}

model FundPerformanceRisk {
  id                Int    @id @default(autoincrement())
  performanceType   String @map("performance_type")
  performancePeriod String @map("performance_period")
  performanceValue  Float? @map("performance_value")

  classAbbrId Int       @map("class_abbr_id")
  classAbbrs  ClassAbbr @relation(fields: [classAbbrId], references: [id], onDelete: Cascade)

  @@map("fund_performance_risk")
}

model FundNAV {
  id        Int   @id @default(autoincrement())
  netAsset  Float @map("net_asset")
  lastValue Float @map("last_value")

  classAbbrId Int       @map("class_abbr_id")
  classAbbrs  ClassAbbr @relation(fields: [classAbbrId], references: [id], onDelete: Cascade)

  @@map("fund_nav")
}

model FundRiskLevel {
  id                Int     @id @default(autoincrement())
  fundRiskLevelName String  @map("fund_risk_level_name")
  fundInvestment    String  @map("fund_investment")
  Funds             Funds[]

  @@map("fund_risk_level")
}

model ClassAbbr {
  id             Int    @id @default(autoincrement())
  classAbbrName  String @map("class_abbr_name")
  dividendPolicy String @map("dividend_policy")

  fundId Int   @map("fund_id")
  funds  Funds @relation(fields: [fundId], references: [id], onDelete: Cascade)

  FeeDetial           FeeDetial[]
  fundPerformanceRisk FundPerformanceRisk[]
  FundNAV             FundNAV[]
  Wishlist            Wishlist[]

  @@map("class_abbr")
}

model Wishlist {
  id             Int      @id @default(autoincrement())
  interestRating Int
  note           String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  userId      Int       @map("user_id")
  classAbbrId Int       @map("class_abbr_id")
  users       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classAbbr   ClassAbbr @relation(fields: [classAbbrId], references: [id], onDelete: Cascade)

  @@map("wishlist")
}
